{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///app/src/lib/seeds/index.ts"],"sourcesContent":["import bendtBaguette from \"./theBendtBaguette.json\";\n\nexport const seedFiles = [bendtBaguette];"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,YAAY;IAAC,+GAAA,CAAA,UAAa;CAAC","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///app/src/lib/localdata.ts"],"sourcesContent":["import { seedFiles } from \"./seeds\";\n\n/**\n * Simple in-memory data store for development/testing.\n * This is NOT persistent and will reset when the server restarts.\n */\n\nexport interface BusinessContextRecord {\n  apiKey: string;\n  name: string;\n  context: object;\n}\n\ntype DataStore = Record<string, BusinessContextRecord>;\n\nclass LocalData {\n  private static store: DataStore = {};\n\n  // Call loadSeeds when the class is first loaded\n  private static _initialized = (() => {\n    console.log('Loading seeds from local data store...');\n    LocalData.loadSeeds();\n    console.log('Seeds loaded successfully.');\n    console.log(LocalData.getAll());\n    return true;\n  })();\n\n  private static loadSeeds() {\n    console.log(`Loading ${seedFiles.length} seed files..`);\n\n    for (const seed of seedFiles) {\n      try {\n        console.log(`Loading seed file: ${seed?.name}`);\n        // Validate required fields\n        if (!seed?.apiKey || !seed?.name) {\n          console.warn(`Seed file is missing required 'apiKey' or 'name'. Skipping.`);\n          continue;\n        }\n        // context is everything except apiKey\n        const { apiKey, ...context } = seed;\n        this.store[apiKey] = {\n          apiKey,\n          name: seed.name,\n          context,\n        };\n      } catch (err) {\n        console.warn(`Failed to load seed file:`, err);\n      }\n    }\n  }\n\n  static get(key: string): BusinessContextRecord | undefined {\n    return this.store[key];\n  }\n\n  static set(key: string, value: BusinessContextRecord): void {\n    this.store[key] = value;\n  }\n\n  static delete(key: string): void {\n    delete this.store[key];\n  }\n\n  static clear(): void {\n    this.store = {};\n  }\n\n  static getAll(): DataStore {\n    return { ...this.store };\n  }\n}\nconsole.log(\"LocalData initialized:\", LocalData.getAll());\n\nexport default LocalData;"],"names":[],"mappings":";;;AAAA;;AAeA,MAAM;IACJ,OAAe,QAAmB,CAAC,EAAE;IAErC,gDAAgD;IAChD,OAAe,eAAe,CAAC;QAC7B,QAAQ,GAAG,CAAC;QACZ,UAAU,SAAS;QACnB,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,UAAU,MAAM;QAC5B,OAAO;IACT,CAAC,IAAI;IAEL,OAAe,YAAY;QACzB,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,8HAAA,CAAA,YAAS,CAAC,MAAM,CAAC,aAAa,CAAC;QAEtD,KAAK,MAAM,QAAQ,8HAAA,CAAA,YAAS,CAAE;YAC5B,IAAI;gBACF,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,MAAM,MAAM;gBAC9C,2BAA2B;gBAC3B,IAAI,CAAC,MAAM,UAAU,CAAC,MAAM,MAAM;oBAChC,QAAQ,IAAI,CAAC,CAAC,2DAA2D,CAAC;oBAC1E;gBACF;gBACA,sCAAsC;gBACtC,MAAM,EAAE,MAAM,EAAE,GAAG,SAAS,GAAG;gBAC/B,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG;oBACnB;oBACA,MAAM,KAAK,IAAI;oBACf;gBACF;YACF,EAAE,OAAO,KAAK;gBACZ,QAAQ,IAAI,CAAC,CAAC,yBAAyB,CAAC,EAAE;YAC5C;QACF;IACF;IAEA,OAAO,IAAI,GAAW,EAAqC;QACzD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI;IACxB;IAEA,OAAO,IAAI,GAAW,EAAE,KAA4B,EAAQ;QAC1D,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG;IACpB;IAEA,OAAO,OAAO,GAAW,EAAQ;QAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI;IACxB;IAEA,OAAO,QAAc;QACnB,IAAI,CAAC,KAAK,GAAG,CAAC;IAChB;IAEA,OAAO,SAAoB;QACzB,OAAO;YAAE,GAAG,IAAI,CAAC,KAAK;QAAC;IACzB;AACF;AACA,QAAQ,GAAG,CAAC,0BAA0B,UAAU,MAAM;uCAEvC","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///app/src/app/api/chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport OpenAI from 'openai';\nimport { ChatRequest, ChatResponse } from '@/types/chat';\nimport LocalData from '@/lib/localdata';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nconst allowedOrigin = \"http://localhost:3001\";\n\nexport async function OPTIONS() {\n  return NextResponse.json(\n    {},\n    {\n      status: 200,\n      headers: {\n        \"Access-Control-Allow-Origin\": allowedOrigin,\n        \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n        \"Access-Control-Allow-Headers\": \"Content-Type, x-chat-service-api-key\",\n      },\n    }\n  );\n}\n\nexport async function POST(request: NextRequest): Promise<NextResponse<ChatResponse>> {\n  const corsHeaders = {\n    \"Access-Control-Allow-Origin\": allowedOrigin,\n    \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\n    \"Access-Control-Allow-Headers\": \"Content-Type, x-chat-service-api-key\",\n  };\n\n  try {\n    if (!process.env.OPENAI_API_KEY) {\n      return NextResponse.json(\n        { message: '', error: 'OpenAI API key not configured' },\n        { status: 500 }\n      );\n    }\n\n    const apiKey = request.headers.get(\"x-chat-service-api-key\");\n    if (!apiKey) {\n      return NextResponse.json(\n        { message: '', error: 'Missing x-chat-service-api-key header.' },\n        { status: 400 }\n      );\n    }\n\n    const body: ChatRequest = await request.json();\n\n    if (!body.messages || !Array.isArray(body.messages)) {\n      return NextResponse.json(\n        { message: '', error: 'Invalid request format.' },\n        { status: 400 }\n      );\n    }\n\n    // Get business context using the apiKey from the header\n    const businessRecord = LocalData.get(apiKey);\n    if (!businessRecord) {\n      console.log({ localData: LocalData.getAll() });\n      console.log({ apiKey, businessRecord });\n      return NextResponse.json(\n        { message: '', error: 'Invalid API key.  Please check your x-chat-service-api-key header.' },\n        { status: 404 }\n      );\n    }\n\n    const businessInfo = typeof businessRecord.context === \"string\"\n      ? businessRecord.context\n      : JSON.stringify(businessRecord.context, null, 2);\n\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [\n        {\n          role: 'system',\n          content: `You are a helpful customer service assistant for our bakery. Here is the business information:\\n\\n${businessInfo}\\n\\nAlways provide accurate information about our business. If someone asks about something not covered, politely let them know you can connect them with a team member for more details.`\n        },\n        ...body.messages.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        }))\n      ],\n      max_tokens: 1000,\n      temperature: 0.7,\n    });\n\n    const message = completion.choices[0]?.message?.content || '';\n\n    return NextResponse.json({ message }, { headers: corsHeaders });\n  } catch (error) {\n    console.error('OpenAI API error:', error);\n    return NextResponse.json(\n      { message: '', error: 'Failed to get response from AI' },\n      { status: 500, headers: corsHeaders }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AAEA;;;;AAEA,MAAM,SAAS,IAAI,wKAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAEA,MAAM,gBAAgB;AAEf,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB,CAAC,GACD;QACE,QAAQ;QACR,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AAEJ;AAEO,eAAe,KAAK,OAAoB;IAC7C,MAAM,cAAc;QAClB,+BAA+B;QAC/B,gCAAgC;QAChC,gCAAgC;IAClC;IAEA,IAAI;QACF,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAI,OAAO;YAAgC,GACtD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC;QACnC,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAI,OAAO;YAAyC,GAC/D;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAoB,MAAM,QAAQ,IAAI;QAE5C,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,MAAM,OAAO,CAAC,KAAK,QAAQ,GAAG;YACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAI,OAAO;YAA0B,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,wDAAwD;QACxD,MAAM,iBAAiB,yHAAA,CAAA,UAAS,CAAC,GAAG,CAAC;QACrC,IAAI,CAAC,gBAAgB;YACnB,QAAQ,GAAG,CAAC;gBAAE,WAAW,yHAAA,CAAA,UAAS,CAAC,MAAM;YAAG;YAC5C,QAAQ,GAAG,CAAC;gBAAE;gBAAQ;YAAe;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAI,OAAO;YAAqE,GAC3F;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,eAAe,OAAO,eAAe,OAAO,KAAK,WACnD,eAAe,OAAO,GACtB,KAAK,SAAS,CAAC,eAAe,OAAO,EAAE,MAAM;QAEjD,MAAM,aAAa,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtD,OAAO;YACP,UAAU;gBACR;oBACE,MAAM;oBACN,SAAS,CAAC,kGAAkG,EAAE,aAAa,yLAAyL,CAAC;gBACvT;mBACG,KAAK,QAAQ,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;wBAC3B,MAAM,IAAI,IAAI;wBACd,SAAS,IAAI,OAAO;oBACtB,CAAC;aACF;YACD,YAAY;YACZ,aAAa;QACf;QAEA,MAAM,UAAU,WAAW,OAAO,CAAC,EAAE,EAAE,SAAS,WAAW;QAE3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAQ,GAAG;YAAE,SAAS;QAAY;IAC/D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAI,OAAO;QAAiC,GACvD;YAAE,QAAQ;YAAK,SAAS;QAAY;IAExC;AACF","debugId":null}}]
}